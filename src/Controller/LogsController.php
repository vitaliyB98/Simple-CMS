<?php
namespace App\Controller;

use App\Controller\AppController;

/**
 * Logs Controller
 *
 * @property \App\Model\Table\LogsTable $Logs
 *
 * @method \App\Model\Entity\Log[] paginate($object = null, array $settings = [])
 */
class LogsController extends AppController
{
    /**
     * Initialize method
    */
    public function initialize() {
      $this->loadModel('Users');
      parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @param int $limit
     *   Number row.
     *
     * @return \Cake\Http\Response|null
     */
    public function index($limit = 20)
    {
      // Count record.
      $count = $this->Logs->find('all')->count();
      $logs = $this->paginate($this->Logs->find('all')->contain('Users'), [
        'limit' => $limit,
        'order' => [
          'Logs.created' => 'DESC'
        ]
      ]);

      $this->set(compact('logs', 'count'));
      $this->set('_serialize', ['logs']);
    }

    /**
     * View method
     *
     * @param string|null $id Log id.
     *
     * @return \Cake\Http\Response|null
     *
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
      $log = $this->Logs->get($id, [
          'contain' => []
      ]);

      $this->set('log', $log);
      $this->set('_serialize', ['log']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
      $log = $this->Logs->newEntity();
      if ($this->request->is('post')) {
        $log = $this->Logs->patchEntity($log, $this->request->getData());
        if ($this->Logs->save($log)) {
          $this->Flash->success(__('The log has been saved.'));

          return $this->redirect(['action' => 'index']);
        }
        $this->Flash->error(__('The log could not be saved. Please, try again.'));
      }
      $this->set(compact('log'));
      $this->set('_serialize', ['log']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Log id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
      $log = $this->Logs->get($id, [
          'contain' => []
      ]);
      if ($this->request->is(['patch', 'post', 'put'])) {
        $log = $this->Logs->patchEntity($log, $this->request->getData());
        if ($this->Logs->save($log)) {
          $this->Flash->success(__('The log has been saved.'));

          return $this->redirect(['action' => 'index']);
        }
        $this->Flash->error(__('The log could not be saved. Please, try again.'));
      }
      $this->set(compact('log'));
      $this->set('_serialize', ['log']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Log id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
      $this->request->allowMethod(['post', 'delete']);
      $log = $this->Logs->get($id);
      if ($this->Logs->delete($log)) {
          $this->Flash->success(__('The log has been deleted.'));
      } else {
          $this->Flash->error(__('The log could not be deleted. Please, try again.'));
      }

      return $this->redirect(['action' => 'index']);
    }

    /**
     * Delete all logs.
     *
     * @return \Cake\Http\Response|null Redirects to index.
     */
    public function deleteAll() {
      $this->request->allowMethod(['post', 'deleteAll']);
      $logs = $this->Logs->find('all');

      foreach ($logs as $log) {
        $this->Logs->delete($log);
      }

      return $this->redirect(['action' => 'index']);
    }

}
